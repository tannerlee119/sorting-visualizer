{"ast":null,"code":"var _jsxFileName = \"/Users/tannerlee/Documents/SP2025/independent/untitled folder/thing/sorting-visualizer/src/Settings.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport './Settings.css';\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Settings({\n  sortArray,\n  setSortArray,\n  highlightBar,\n  setHighlightBar\n}) {\n  _s();\n  let sleepTime = 20;\n  useEffect(() => {\n    generateNewArray(25);\n  }, []);\n  const generateNewArray = size => {\n    const newArray = Array(size).fill(0).map((x, index) => {\n      return index + 2;\n    });\n    setSortArray(shuffle(newArray));\n  };\n  const handleSliderChange = () => {\n    const slider = document.getElementById(\"myRange\");\n    generateNewArray(Number(slider.value));\n  };\n  function shuffle(array) {\n    let currentIndex = array.length,\n      randomIndex;\n\n    // While there remain elements to shuffle.\n    while (currentIndex != 0) {\n      // Pick a remaining element.\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n    }\n    return array;\n  }\n  function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  function makeSettingsUnuseable() {\n    // grabs the elements\n    const slider = document.getElementById(\"myRange\");\n    const shuffleBtn = document.getElementById('shuffle-btn');\n    const visualizeBtn = document.getElementById('visualize-btn');\n\n    //disables the elements\n    slider.disabled = true;\n    shuffleBtn.disabled = true;\n    visualizeBtn.disabled = true;\n\n    // show the user that the buttons can't be clicked\n    shuffleBtn.setAttribute('opacity', '0');\n  }\n  function makeSettingsUsable() {\n    //grabs the elements\n    const slider = document.getElementById(\"myRange\");\n    const shuffleBtn = document.getElementById('shuffle-btn');\n    const visualizeBtn = document.getElementById('visualize-btn');\n\n    //disables the elements\n    slider.disabled = false;\n    shuffleBtn.disabled = false;\n    visualizeBtn.disabled = false;\n\n    // return to normal\n  }\n  async function handleSortSelection() {\n    const yourSelect = document.getElementById('select-dropdown');\n    const sortSelection = yourSelect.options[yourSelect.selectedIndex].value;\n    const slider = document.getElementById(\"myRange\");\n    let sleepTime;\n    makeSettingsUnuseable();\n    switch (sortSelection) {\n      case 'bubbleSort':\n        sleepTime = 10 / Math.pow(Number(slider.value), 2);\n        await bubbleSort(sortArray, sleepTime);\n        break;\n      case 'insertionSort':\n        sleepTime = 100 / Math.pow(Number(slider.value), 4);\n        await insertionSort(sortArray, sleepTime);\n        break;\n      case 'selectionSort':\n        sleepTime = 1000 / Math.pow(Number(slider.value), 1);\n        await selectionSort(sortArray, sleepTime);\n        break;\n      case 'quickSort':\n        sleepTime = 1 / Math.pow(Number(slider.value), 2);\n        await quickSort(sortArray, 0, sortArray.length - 1, sleepTime);\n        break;\n      case 'mergeSort':\n        sleepTime = 400 / Math.pow(Number(slider.value), 1);\n        await mergeSort(sortArray, sortArray, 0, sortArray.length - 1, sleepTime);\n        break;\n      case 'heapSort':\n        sleepTime = 5000 / Math.pow(Number(slider.value), 2);\n        await heapSort(sortArray, sleepTime);\n        break;\n      case 'countingSort':\n        sleepTime = 1000 / Math.pow(Number(slider.value), 1);\n        await countingSort(sortArray, sleepTime);\n        break;\n      case 'radixSort':\n        sleepTime = 500 / Math.pow(Number(slider.value), 1);\n        await radixSort(sortArray, sleepTime);\n        break;\n      case 'bucketSort':\n        sleepTime = 10000 / Math.pow(Number(slider.value), 2);\n        await bucketSort(sortArray, sleepTime);\n        break;\n      case 'shellSort':\n        sleepTime = 1000 / Math.pow(Number(slider.value), 1);\n        await shellSort(sortArray, sleepTime);\n        break;\n      case 'cocktailSort':\n        sleepTime = 50000 / Math.pow(Number(slider.value), 3);\n        await cocktailSort(sortArray, sleepTime);\n        break;\n      case 'combSort':\n        sleepTime = 2000 / Math.pow(Number(slider.value), 1);\n        await combSort(sortArray, sleepTime);\n        break;\n      case 'gnomeSort':\n        sleepTime = 5000 / Math.pow(Number(slider.value), 2);\n        await gnomeSort(sortArray, sleepTime);\n        break;\n      case 'cycleSort':\n        sleepTime = 1000 / Math.pow(Number(slider.value), 1);\n        await cycleSort(sortArray, sleepTime);\n        break;\n      case 'pancakeSort':\n        sleepTime = 5000000 / Math.pow(Number(slider.value), 5);\n        await pancakeSort(sortArray, sleepTime);\n        break;\n      default:\n        break;\n    }\n    setHighlightBar([-1, -1]);\n    makeSettingsUsable();\n  }\n\n  // quicksort\n  async function quickSort(array, start, end, sleepTime) {\n    if (start >= end) {\n      return;\n    }\n    let index = await partition(array, start, end, sleepTime);\n    await quickSort(array, start, index - 1, sleepTime);\n    await quickSort(array, index + 1, end, sleepTime);\n  }\n  // partition function\n  async function partition(array, start, end, sleepTime) {\n    let pivotIndex = start;\n    let pivotValue = array[end];\n    for (let i = start; i < end; i++) {\n      if (array[i] < pivotValue) {\n        await sleep(20000 * sleepTime);\n        [array[i], array[pivotIndex]] = [array[pivotIndex], array[i]];\n        setHighlightBar([i, pivotIndex]);\n        setSortArray([...array]);\n        pivotIndex++;\n      }\n    }\n    await sleep(sleepTime);\n    [array[pivotIndex], array[end]] = [array[end], array[pivotIndex]];\n    setSortArray([...array]);\n    return pivotIndex;\n  }\n\n  // mergesort\n  async function mergeSort(array, currArray, start, end, sleepTime) {\n    if (currArray.length <= 1) {\n      return currArray;\n    }\n    const middle = Math.floor(currArray.length / 2);\n    const left = currArray.slice(0, middle);\n    const right = currArray.slice(middle);\n    await sleep(sleepTime);\n    return await merge(array, start, await mergeSort(array, left, start, middle - 1, sleepTime), await mergeSort(array, right, middle, end, sleepTime), sleepTime);\n  }\n  async function merge(array, start, arr1, arr2, sleepTime) {\n    let p1 = 0;\n    let p2 = 0;\n    let curr = start;\n    while (p1 < arr1.length && p2 < arr2.length) {\n      // merges\n      if (arr1[p1] < arr2[p2]) {\n        array[curr] = arr1[p1];\n        curr++;\n        p1++;\n      } else if (arr2[p2] < arr1[p1]) {\n        array[curr] = arr2[p2];\n        curr++;\n        p2++;\n      }\n      setHighlightBar([curr, curr]);\n      setSortArray([...array]);\n      await sleep(sleepTime);\n    }\n\n    // updates any leftover values\n    while (p1 < arr1.length) {\n      array[curr] = arr1[p1];\n      curr++;\n      p1++;\n      setHighlightBar([curr, curr]);\n    }\n    while (p2 < arr2.length) {\n      array[curr] = arr2[p2];\n      curr++;\n      p2++;\n      setHighlightBar([curr, curr]);\n    }\n    await sleep(sleepTime);\n    setSortArray([...array]);\n    // update state\n\n    // return slice\n    return array.slice(start, start + arr1.length + arr2.length);\n  }\n\n  // heap sort function\n  async function heapSort(array, sleepTime) {\n    let n = array.length;\n    for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n      setHighlightBar([i, i]);\n      await heapify(array, n, i, sleepTime);\n    }\n    for (let i = n - 1; i > 0; i--) {\n      await sleep(sleepTime);\n      [array[0], array[i]] = [array[i], array[0]];\n      setHighlightBar([i, i]);\n      setSortArray([...array]);\n      await heapify(array, i, 0, sleepTime);\n    }\n  }\n  async function heapify(array, n, i, sleepTime) {\n    let largest = i;\n    let l = 2 * i + 1;\n    let r = 2 * i + 2;\n    if (l < n && array[l] > array[largest]) {\n      largest = l;\n    }\n    if (r < n && array[r] > array[largest]) {\n      largest = r;\n    }\n    if (largest != i) {\n      await sleep(sleepTime);\n      [array[i], array[largest]] = [array[largest], array[i]];\n      setSortArray([...array]);\n      await heapify(array, n, largest, sleepTime);\n    }\n  }\n\n  // bubble sort function\n  async function bubbleSort(array, sleepTime) {\n    let n = array.length;\n    for (let i = 0; i < n - 1; i++) {\n      for (let j = 0; j < n - i - 1; j++) {\n        if (array[j] > array[j + 1]) {\n          await sleep(sleepTime);\n          [array[j], array[j + 1]] = [array[j + 1], array[j]];\n          setHighlightBar([i, j]);\n          setSortArray([...array]);\n        }\n      }\n    }\n  }\n\n  // selection sort\n  async function selectionSort(array, sleepTime) {\n    let n = array.length;\n    for (let i = 0; i < n; i++) {\n      let min = i;\n      for (let j = i + 1; j < n; j++) {\n        if (array[j] < array[min]) {\n          min = j;\n          setHighlightBar([i, j]);\n        }\n      }\n      await sleep(sleepTime);\n      [array[i], array[min]] = [array[min], array[i]];\n      setHighlightBar([i, min]);\n      setSortArray([...array]);\n    }\n  }\n\n  // insertion sort\n  async function insertionSort(array, sleepTime) {\n    let n = array.length;\n    for (let i = 1; i < n; i++) {\n      let key = array[i];\n      let j = i - 1;\n      while (j >= 0 && array[j] > key) {\n        await sleep(sleepTime);\n        array[j + 1] = array[j];\n        setHighlightBar([i, j]);\n        setSortArray([...array]);\n        j = j - 1;\n      }\n      array[j + 1] = key;\n      setSortArray([...array]);\n    }\n  }\n\n  // counting sort\n  async function countingSort(array, sleepTime) {\n    let n = array.length;\n    let output = new Array(n);\n    let count = new Array(200).fill(0);\n    for (let i = 0; i < n; i++) {\n      count[array[i]]++;\n    }\n    for (let i = 1; i < 200; i++) {\n      count[i] += count[i - 1];\n    }\n    for (let i = n - 1; i >= 0; i--) {\n      output[count[array[i]] - 1] = array[i];\n      count[array[i]]--;\n    }\n    for (let i = 0; i < n; i++) {\n      await sleep(sleepTime);\n      array[i] = output[i];\n      setHighlightBar([i, i]);\n      setSortArray([...array]);\n    }\n  }\n\n  // radix sort\n  async function radixSort(array, sleepTime) {\n    let n = array.length;\n    let max = Math.max(...array);\n    for (let exp = 1; Math.floor(max / exp) > 0; exp *= 10) {\n      await countSort(array, n, exp, sleepTime);\n    }\n  }\n  async function countSort(array, n, exp, sleepTime) {\n    let output = new Array(n);\n    let count = new Array(10).fill(0);\n    for (let i = 0; i < n; i++) {\n      count[Math.floor(array[i] / exp) % 10]++;\n    }\n    for (let i = 1; i < 10; i++) {\n      count[i] += count[i - 1];\n    }\n    for (let i = n - 1; i >= 0; i--) {\n      output[count[Math.floor(array[i] / exp) % 10] - 1] = array[i];\n      count[Math.floor(array[i] / exp) % 10]--;\n    }\n    for (let i = 0; i < n; i++) {\n      await sleep(sleepTime);\n      array[i] = output[i];\n      setHighlightBar([i, i]);\n      setSortArray([...array]);\n    }\n  }\n\n  // bucket sort\n  async function bucketSort(array, sleepTime) {\n    let n = array.length;\n    let buckets = new Array(10);\n    for (let i = 0; i < buckets.length; i++) {\n      buckets[i] = [];\n    }\n    for (let i = 0; i < n; i++) {\n      setHighlightBar([i, i]);\n      let bucketIndex = Math.floor(array[i] / 10);\n      buckets[bucketIndex].push(array[i]);\n    }\n    for (let i = 0; i < buckets.length; i++) {\n      setHighlightBar([i, i]);\n      await insertionSortForBucketSort(buckets[i], sleepTime);\n    }\n    let index = 0;\n    for (let i = 0; i < buckets.length; i++) {\n      for (let j = 0; j < buckets[i].length; j++) {\n        await sleep(sleepTime);\n        array[index++] = buckets[i][j];\n        setHighlightBar([i, j]);\n        setSortArray([...array]);\n      }\n    }\n  }\n\n  // insertion sort for bucket sort\n  async function insertionSortForBucketSort(array, sleepTime) {\n    let n = array.length;\n    for (let i = 1; i < n; i++) {\n      let key = array[i];\n      let j = i - 1;\n      while (j >= 0 && array[j] > key) {\n        await sleep(sleepTime);\n        setHighlightBar([i, j]);\n        array[j + 1] = array[j];\n        j = j - 1;\n      }\n      array[j + 1] = key;\n    }\n  }\n\n  // shell sort\n  async function shellSort(array, sleepTime) {\n    let n = array.length;\n    for (let gap = Math.floor(n / 2); gap > 0; gap = Math.floor(gap / 2)) {\n      for (let i = gap; i < n; i++) {\n        let temp = array[i];\n        let j;\n        for (j = i; j >= gap && array[j - gap] > temp; j -= gap) {\n          await sleep(sleepTime);\n          array[j] = array[j - gap];\n          setHighlightBar([i, j]);\n          setSortArray([...array]);\n        }\n        array[j] = temp;\n        setHighlightBar([i, j]);\n        setSortArray([...array]);\n      }\n    }\n  }\n\n  // cocktail sort\n  async function cocktailSort(array, sleepTime) {\n    let n = array.length;\n    let swapped = true;\n    let start = 0;\n    let end = n - 1;\n    while (swapped) {\n      swapped = false;\n      for (let i = start; i < end; i++) {\n        if (array[i] > array[i + 1]) {\n          await sleep(sleepTime);\n          let temp = array[i];\n          array[i] = array[i + 1];\n          array[i + 1] = temp;\n          setHighlightBar([start, end, i]);\n          setSortArray([...array]);\n          swapped = true;\n        }\n      }\n      if (!swapped) {\n        break;\n      }\n      swapped = false;\n      end--;\n      for (let i = end - 1; i >= start; i--) {\n        if (array[i] > array[i + 1]) {\n          await sleep(sleepTime);\n          let temp = array[i];\n          array[i] = array[i + 1];\n          array[i + 1] = temp;\n          setHighlightBar([start, end, i]);\n          setSortArray([...array]);\n          swapped = true;\n        }\n      }\n      start++;\n    }\n  }\n\n  // comb sort\n  async function combSort(array, sleepTime) {\n    let n = array.length;\n    let gap = n;\n    let shrink = 1.3;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n      gap = Math.floor(gap / shrink);\n      if (gap < 1) {\n        gap = 1;\n      }\n      swapped = false;\n      for (let i = 0; i + gap < n; i++) {\n        if (array[i] > array[i + gap]) {\n          await sleep(sleepTime);\n          let temp = array[i];\n          array[i] = array[i + gap];\n          array[i + gap] = temp;\n          setHighlightBar([i, i + gap]);\n          setSortArray([...array]);\n          swapped = true;\n        }\n      }\n    }\n  }\n\n  // gnome sort\n  async function gnomeSort(array, sleepTime) {\n    let n = array.length;\n    let index = 0;\n    while (index < n) {\n      if (index === 0) {\n        index++;\n      }\n      if (array[index] >= array[index - 1]) {\n        index++;\n      } else {\n        await sleep(sleepTime);\n        let temp = array[index];\n        array[index] = array[index - 1];\n        array[index - 1] = temp;\n        setHighlightBar([index, index]);\n        setSortArray([...array]);\n        index--;\n      }\n    }\n  }\n\n  // cycle sort\n  async function cycleSort(array, sleepTime) {\n    let n = array.length;\n    for (let cycleStart = 0; cycleStart <= n - 2; cycleStart++) {\n      let item = array[cycleStart];\n      let pos = cycleStart;\n      for (let i = cycleStart + 1; i < n; i++) {\n        if (array[i] < item) {\n          pos++;\n        }\n      }\n      if (pos === cycleStart) {\n        continue;\n      }\n      while (item === array[pos]) {\n        pos++;\n      }\n      if (pos !== cycleStart) {\n        await sleep(sleepTime);\n        let temp = item;\n        item = array[pos];\n        array[pos] = temp;\n        setSortArray([...array]);\n      }\n      while (pos !== cycleStart) {\n        pos = cycleStart;\n        for (let i = cycleStart + 1; i < n; i++) {\n          if (array[i] < item) {\n            pos++;\n          }\n        }\n        while (item === array[pos]) {\n          pos++;\n        }\n        if (item !== array[pos]) {\n          await sleep(sleepTime);\n          let temp = item;\n          item = array[pos];\n          array[pos] = temp;\n          setHighlightBar([pos]);\n          setSortArray([...array]);\n        }\n      }\n    }\n  }\n\n  // pancake sort\n  async function pancakeSort(array, sleepTime) {\n    let n = array.length;\n    for (let i = n; i > 1; i--) {\n      let max = 0;\n      for (let j = 0; j < i; j++) {\n        if (array[j] > array[max]) {\n          max = j;\n        }\n        setHighlightBar([i, j]);\n      }\n      if (max !== i - 1) {\n        await flip(array, max, sleepTime);\n        await flip(array, i - 1, sleepTime);\n      }\n    }\n  }\n  async function flip(array, i, sleepTime) {\n    let start = 0;\n    while (start < i) {\n      await sleep(sleepTime);\n      let temp = array[start];\n      array[start] = array[i];\n      array[i] = temp;\n      setHighlightBar([i]);\n      setSortArray([...array]);\n      start++;\n      i--;\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"navBar\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"shuffle-btn\",\n      onClick: () => generateNewArray(sortArray.length),\n      children: \"Shuffle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 623,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: \"10\",\n      max: \"60\",\n      step: \"2\",\n      defaultValue: \"35\",\n      className: \"slider\",\n      onInput: () => handleSliderChange(),\n      id: \"myRange\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 625,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"visualize-btn\",\n      onClick: () => handleSortSelection(),\n      children: \"Visualize!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 635,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"custom-select\",\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"select\",\n        id: \"select-dropdown\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"quickSort\",\n          children: \"QuickSort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 639,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"mergeSort\",\n          children: \"MergeSort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 640,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"bubbleSort\",\n          children: \"BubbleSort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 641,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"heapSort\",\n          children: \"HeapSort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 642,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"insertionSort\",\n          children: \"InsertionSort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 643,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"selectionSort\",\n          children: \"SelectionSort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"countingSort\",\n          children: \"CountingSort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 645,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"radixSort\",\n          children: \"RadixSort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 646,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"bucketSort\",\n          children: \"BucketSort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 647,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"shellSort\",\n          children: \"ShellSort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 648,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"cocktailSort\",\n          children: \"CocktailSort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 649,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"combSort\",\n          children: \"CombSort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 650,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"gnomeSort\",\n          children: \"GnomeSort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 651,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"cycleSort\",\n          children: \"CycleSort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 652,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"pancakeSort\",\n          children: \"PancakeSort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 653,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 638,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 637,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 621,\n    columnNumber: 5\n  }, this);\n}\n_s(Settings, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Settings;\nexport default Settings;\nvar _c;\n$RefreshReg$(_c, \"Settings\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","Settings","sortArray","setSortArray","highlightBar","setHighlightBar","_s","sleepTime","generateNewArray","size","newArray","Array","fill","map","x","index","shuffle","handleSliderChange","slider","document","getElementById","Number","value","array","currentIndex","length","randomIndex","Math","floor","random","sleep","ms","Promise","resolve","setTimeout","makeSettingsUnuseable","shuffleBtn","visualizeBtn","disabled","setAttribute","makeSettingsUsable","handleSortSelection","yourSelect","sortSelection","options","selectedIndex","pow","bubbleSort","insertionSort","selectionSort","quickSort","mergeSort","heapSort","countingSort","radixSort","bucketSort","shellSort","cocktailSort","combSort","gnomeSort","cycleSort","pancakeSort","start","end","partition","pivotIndex","pivotValue","i","currArray","middle","left","slice","right","merge","arr1","arr2","p1","p2","curr","n","heapify","largest","l","r","j","min","key","output","count","max","exp","countSort","buckets","bucketIndex","push","insertionSortForBucketSort","gap","temp","swapped","shrink","cycleStart","item","pos","flip","className","children","id","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","step","defaultValue","onInput","_c","$RefreshReg$"],"sources":["/Users/tannerlee/Documents/SP2025/independent/untitled folder/thing/sorting-visualizer/src/Settings.jsx"],"sourcesContent":["import React from 'react';\nimport './Settings.css';\nimport { useEffect } from 'react';\n\nfunction Settings({ sortArray, setSortArray, highlightBar, setHighlightBar}) {\n\n    let sleepTime = 20;\n\n    useEffect(() => {\n        generateNewArray(25);\n    },[]);\n\n\n\n    const generateNewArray = (size) => {\n        const newArray = Array(size).fill(0).map((x, index) => {\n            return index+2;\n        });\n        setSortArray(shuffle(newArray));\n    }\n\n    const handleSliderChange = () => {\n        const slider = document.getElementById(\"myRange\");\n        generateNewArray(Number(slider.value));\n        \n    }\n\n    function shuffle(array) {\n        let currentIndex = array.length,  randomIndex;\n      \n        // While there remain elements to shuffle.\n        while (currentIndex != 0) {\n      \n          // Pick a remaining element.\n          randomIndex = Math.floor(Math.random() * currentIndex);\n          currentIndex--;\n      \n          // And swap it with the current element.\n          [array[currentIndex], array[randomIndex]] = [\n            array[randomIndex], array[currentIndex]];\n        }\n      \n        return array;\n      }\n\n\n\n\n\n\n\n    function sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    function makeSettingsUnuseable() {\n        // grabs the elements\n        const slider = document.getElementById(\"myRange\");\n        const shuffleBtn = document.getElementById('shuffle-btn');\n        const visualizeBtn = document.getElementById('visualize-btn');\n\n        //disables the elements\n        slider.disabled = true;\n        shuffleBtn.disabled = true;\n        visualizeBtn.disabled = true;\n\n        // show the user that the buttons can't be clicked\n        shuffleBtn.setAttribute('opacity','0');\n    }\n\n    function makeSettingsUsable() {\n        //grabs the elements\n        const slider = document.getElementById(\"myRange\");\n        const shuffleBtn = document.getElementById('shuffle-btn');\n        const visualizeBtn = document.getElementById('visualize-btn');\n\n        //disables the elements\n        slider.disabled = false;\n        shuffleBtn.disabled = false;\n        visualizeBtn.disabled = false;\n\n        // return to normal\n    }\n\n    async function handleSortSelection() {\n        const yourSelect = document.getElementById('select-dropdown');\n        const sortSelection = yourSelect.options[yourSelect.selectedIndex].value;\n\n        const slider = document.getElementById(\"myRange\");\n        let sleepTime;\n\n        makeSettingsUnuseable();\n\n        switch (sortSelection) {\n            case 'bubbleSort':\n                sleepTime = 10/Math.pow(Number(slider.value),2);\n                await bubbleSort(sortArray,sleepTime);\n                break;\n            case 'insertionSort':\n                sleepTime = 100/Math.pow(Number(slider.value),4);\n                await insertionSort(sortArray,sleepTime);\n                break;\n            case 'selectionSort':\n                sleepTime = 1000/Math.pow(Number(slider.value),1);\n                await selectionSort(sortArray,sleepTime);\n                break;\n            case 'quickSort':\n                sleepTime = 1/Math.pow(Number(slider.value),2);\n                await quickSort(sortArray, 0, sortArray.length - 1,sleepTime);\n                break;\n            case 'mergeSort':\n                sleepTime = 400/Math.pow(Number(slider.value),1);\n                await mergeSort(sortArray,sortArray,0,sortArray.length-1,sleepTime);\n                break;\n            case 'heapSort':\n                sleepTime = 5000/Math.pow(Number(slider.value),2);\n                await heapSort(sortArray,sleepTime);\n                break;\n            case 'countingSort':\n                sleepTime = 1000/Math.pow(Number(slider.value),1);\n                await countingSort(sortArray,sleepTime);\n                break;\n            case 'radixSort':\n                sleepTime = 500/Math.pow(Number(slider.value),1);\n                await radixSort(sortArray,sleepTime);\n                break;\n            case 'bucketSort':\n                sleepTime = 10000/Math.pow(Number(slider.value),2);\n                await bucketSort(sortArray,sleepTime);\n                break;\n            case 'shellSort':\n                sleepTime = 1000/Math.pow(Number(slider.value),1);\n                await shellSort(sortArray,sleepTime);\n                break;\n            case 'cocktailSort':\n                sleepTime = 50000/Math.pow(Number(slider.value),3);\n                await cocktailSort(sortArray,sleepTime);\n                break;\n            case 'combSort':\n                sleepTime = 2000/Math.pow(Number(slider.value),1);\n                await combSort(sortArray,sleepTime);\n                break;\n            case 'gnomeSort':\n                sleepTime = 5000/Math.pow(Number(slider.value),2);\n                await gnomeSort(sortArray,sleepTime);\n                break;\n            case 'cycleSort':\n                sleepTime = 1000/Math.pow(Number(slider.value),1);\n                await cycleSort(sortArray,sleepTime);\n                break;\n            case 'pancakeSort':\n                sleepTime = 5000000/Math.pow(Number(slider.value),5);\n                await pancakeSort(sortArray,sleepTime);\n                break;\n            default:\n                break;\n        }\n        setHighlightBar([-1,-1]);\n        makeSettingsUsable();\n    }\n\n\n\n    // quicksort\n    async function quickSort(array, start, end, sleepTime) {\n        if (start >= end) {\n            return;\n        }\n        let index = await partition(array, start, end,sleepTime);\n        await quickSort(array, start, index - 1,sleepTime);\n        await quickSort(array, index + 1, end,sleepTime);\n    }\n    // partition function\n    async function partition(array, start, end,sleepTime) {\n        let pivotIndex = start;\n        let pivotValue = array[end];\n\n        for (let i = start; i < end; i++) {\n            if (array[i] < pivotValue) {\n                await sleep(20000*sleepTime);\n                [array[i], array[pivotIndex]] = [array[pivotIndex], array[i]];\n                setHighlightBar([i,pivotIndex]);\n                setSortArray([...array]);\n                pivotIndex++;\n            }\n        }\n        await sleep(sleepTime);\n        [array[pivotIndex], array[end]] = [array[end], array[pivotIndex]];\n        setSortArray([...array]);\n        return pivotIndex;\n    }\n\n    // mergesort\n    async function mergeSort(array,currArray,start, end,sleepTime) {\n        if (currArray.length <= 1) {\n            return currArray;\n        }\n        const middle = Math.floor(currArray.length / 2);\n        const left = currArray.slice(0, middle);\n        const right = currArray.slice(middle);\n        await sleep(sleepTime);\n        return await merge(\n            array,\n            start,\n            await mergeSort(array,left, start, middle-1,sleepTime),\n            await mergeSort(array,right,middle,end,sleepTime),\n            sleepTime\n        );\n    }\n    async function merge(array, start, arr1, arr2,sleepTime) {\n        let p1 = 0;\n        let p2 = 0;\n        let curr = start;\n\n        while (p1 < arr1.length && p2 < arr2.length) {\n            // merges\n            if (arr1[p1] < arr2[p2]) {\n                array[curr] = arr1[p1];\n                curr++;\n                p1++;\n            } else if (arr2[p2] < arr1[p1]) {\n                array[curr] = arr2[p2];\n                curr++;\n                p2++;\n            }\n            setHighlightBar([curr,curr])\n            setSortArray([...array]);\n            await sleep(sleepTime);\n        }\n\n        // updates any leftover values\n        while (p1<arr1.length) {\n            array[curr] = arr1[p1];\n            curr++;\n            p1++;\n            setHighlightBar([curr,curr])\n        }\n        while (p2<arr2.length) {\n            array[curr] = arr2[p2];\n            curr++;\n            p2++;\n            setHighlightBar([curr,curr])\n        }\n        await sleep(sleepTime);\n        setSortArray([...array]);\n        // update state\n        \n        // return slice\n        return array.slice(start,start+arr1.length+arr2.length);\n    }\n    \n    // heap sort function\n    async function heapSort(array,sleepTime) {\n        let n = array.length;\n        for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n            setHighlightBar([i,i]);\n            await heapify(array, n, i,sleepTime);\n        }\n        for (let i = n - 1; i > 0; i--) {\n            await sleep(sleepTime);\n            [array[0], array[i]] = [array[i], array[0]];\n            setHighlightBar([i,i]);\n            setSortArray([...array]);\n            await heapify(array, i, 0,sleepTime);\n        }\n    }\n\n    async function heapify(array, n, i,sleepTime) {\n        let largest = i;\n        let l = 2 * i + 1;\n        let r = 2 * i + 2;\n        if (l < n && array[l] > array[largest]) {\n            largest = l;\n        }\n        if (r < n && array[r] > array[largest]) {\n            largest = r;\n        }\n        if (largest != i) {\n            await sleep(sleepTime);\n            [array[i], array[largest]] = [array[largest], array[i]];\n            setSortArray([...array]);\n            await heapify(array, n, largest,sleepTime);\n        }\n    }\n\n    // bubble sort function\n    async function bubbleSort(array,sleepTime) {\n        let n = array.length;\n        for (let i = 0; i < n - 1; i++) {\n            for (let j = 0; j < n - i - 1; j++) {\n                if (array[j] > array[j + 1]) {\n                    await sleep(sleepTime);\n                    [array[j], array[j + 1]] = [array[j + 1], array[j]];\n                    setHighlightBar([i,j]);\n                    setSortArray([...array]);\n                }\n            }\n        }\n    }\n\n    // selection sort\n    async function selectionSort(array,sleepTime) {\n        let n = array.length;\n        for (let i = 0; i < n; i++) {\n            let min = i;\n            for (let j = i + 1; j < n; j++) {\n                if (array[j] < array[min]) {\n                    min = j;\n                    setHighlightBar([i,j]);\n                }\n            }\n            await sleep(sleepTime);\n            [array[i], array[min]] = [array[min], array[i]];\n            setHighlightBar([i,min]);\n            setSortArray([...array]);\n        }\n    }\n    \n    // insertion sort\n    async function insertionSort(array,sleepTime) {\n        let n = array.length;\n        for (let i = 1; i < n; i++) {\n            let key = array[i];\n            let j = i - 1;\n            while (j >= 0 && array[j] > key) {\n                await sleep(sleepTime);\n                array[j + 1] = array[j];\n                setHighlightBar([i,j]);\n                setSortArray([...array]);\n                j = j - 1;\n            }\n            array[j + 1] = key;\n            setSortArray([...array]);\n        }\n    }\n\n    // counting sort\n    async function countingSort(array,sleepTime) {\n        let n = array.length;\n        let output = new Array(n);\n        let count = new Array(200).fill(0);\n        for (let i = 0; i < n; i++) {\n            count[array[i]]++;\n        }\n        for (let i = 1; i < 200; i++) {\n            count[i] += count[i - 1];\n        }\n        for (let i = n - 1; i >= 0; i--) {\n            output[count[array[i]] - 1] = array[i];\n            count[array[i]]--;\n        }\n        for (let i = 0; i < n; i++) {\n            await sleep(sleepTime);\n            array[i] = output[i];\n            setHighlightBar([i,i]);\n            setSortArray([...array]);\n        }\n    }\n\n    // radix sort\n    async function radixSort(array,sleepTime) {\n        let n = array.length;\n        let max = Math.max(...array);\n        for (let exp = 1; Math.floor(max / exp) > 0; exp *= 10) {\n            await countSort(array, n, exp,sleepTime);\n        }\n    }\n    async function countSort(array, n, exp,sleepTime) {\n        let output = new Array(n);\n        let count = new Array(10).fill(0);\n        for (let i = 0; i < n; i++) {\n            count[Math.floor(array[i] / exp) % 10]++;\n        }\n        for (let i = 1; i < 10; i++) {\n            count[i] += count[i - 1];\n        }\n        for (let i = n - 1; i >= 0; i--) {\n            output[count[Math.floor(array[i] / exp) % 10] - 1] = array[i];\n            count[Math.floor(array[i] / exp) % 10]--;\n        }\n        for (let i = 0; i < n; i++) {\n            await sleep(sleepTime);\n            array[i] = output[i];\n            setHighlightBar([i,i]);\n            setSortArray([...array]);\n        }\n    }\n\n\n    // bucket sort\n    async function bucketSort(array,sleepTime) {\n        let n = array.length;\n        let buckets = new Array(10);\n        for (let i = 0; i < buckets.length; i++) {\n            buckets[i] = [];\n        }\n        for (let i = 0; i < n; i++) {\n            setHighlightBar([i,i]);\n            let bucketIndex = Math.floor(array[i] / 10);\n            buckets[bucketIndex].push(array[i]);\n        }\n        for (let i = 0; i < buckets.length; i++) {\n            setHighlightBar([i,i]);\n            await insertionSortForBucketSort(buckets[i],sleepTime);\n        }\n        let index = 0;\n        for (let i = 0; i < buckets.length; i++) {\n            for (let j = 0; j < buckets[i].length; j++) {\n                await sleep(sleepTime);\n                array[index++] = buckets[i][j];\n                setHighlightBar([i,j]);\n                setSortArray([...array]);\n            }\n        }\n    }\n\n    // insertion sort for bucket sort\n    async function insertionSortForBucketSort(array,sleepTime) {\n        let n = array.length;\n        for (let i = 1; i < n; i++) {\n            let key = array[i];\n            let j = i - 1;\n            while (j >= 0 && array[j] > key) {\n                await sleep(sleepTime);\n                setHighlightBar([i,j]);\n                array[j + 1] = array[j];\n                j = j - 1;\n            }\n            array[j + 1] = key;\n        }\n    }\n\n    // shell sort\n    async function shellSort(array,sleepTime) {\n        let n = array.length;\n        for (let gap = Math.floor(n / 2); gap > 0; gap = Math.floor(gap / 2)) {\n            for (let i = gap; i < n; i++) {\n                let temp = array[i];\n                let j;\n                for (j = i; j >= gap && array[j - gap] > temp; j -= gap) {\n                    await sleep(sleepTime);\n                    array[j] = array[j - gap];\n                    setHighlightBar([i,j]);\n                    setSortArray([...array]);\n                }\n                array[j] = temp;\n                setHighlightBar([i,j]);\n                setSortArray([...array]);\n            }\n        }\n    }\n\n    // cocktail sort\n    async function cocktailSort(array,sleepTime) {\n        let n = array.length;\n        let swapped = true;\n        let start = 0;\n        let end = n - 1;\n        while (swapped) {\n            swapped = false;\n            for (let i = start; i < end; i++) {\n                if (array[i] > array[i + 1]) {\n                    await sleep(sleepTime);\n                    let temp = array[i];\n                    array[i] = array[i + 1];\n                    array[i + 1] = temp;\n                    setHighlightBar([start,end,i]);\n                    setSortArray([...array]);\n                    swapped = true;\n                }\n            }\n            if (!swapped) {\n                break;\n            }\n            swapped = false;\n            end--;\n\n            for (let i = end - 1; i >= start; i--) {\n                if (array[i] > array[i + 1]) {\n                    await sleep(sleepTime);\n                    let temp = array[i];\n                    array[i] = array[i + 1];\n                    array[i + 1] = temp;\n                    setHighlightBar([start,end,i]);\n                    setSortArray([...array]);\n                    swapped = true;\n                }\n            }\n            start++;\n        }\n    }\n\n    // comb sort\n    async function combSort(array,sleepTime) {\n        let n = array.length;\n        let gap = n;\n        let shrink = 1.3;\n        let swapped = true;\n        while (gap > 1 || swapped) {\n            gap = Math.floor(gap / shrink);\n            if (gap < 1) {\n                gap = 1;\n            }\n            swapped = false;\n            for (let i = 0; i + gap < n; i++) {\n                if (array[i] > array[i + gap]) {\n                    await sleep(sleepTime);\n                    let temp = array[i];\n                    array[i] = array[i + gap];\n                    array[i + gap] = temp;\n                    setHighlightBar([i,i+gap]);\n                    setSortArray([...array]);\n                    swapped = true;\n                }\n            }\n        }\n    }\n\n    // gnome sort\n    async function gnomeSort(array,sleepTime) {\n        let n = array.length;\n        let index = 0;\n        while (index < n) {\n            if (index === 0) {\n                index++;\n            }\n            if (array[index] >= array[index - 1]) {\n                index++;\n            } else {\n                await sleep(sleepTime);\n                let temp = array[index];\n                array[index] = array[index - 1];\n                array[index - 1] = temp;\n                setHighlightBar([index,index]);\n                setSortArray([...array]);\n                index--;\n            }\n        }\n    }\n\n    // cycle sort\n    async function cycleSort(array,sleepTime) {\n        let n = array.length;\n        for (let cycleStart = 0; cycleStart <= n - 2; cycleStart++) {\n            let item = array[cycleStart];\n            let pos = cycleStart;\n            for (let i = cycleStart + 1; i < n; i++) {\n                if (array[i] < item) {\n                    pos++;\n                }\n            }\n            if (pos === cycleStart) {\n                continue;\n            }\n            while (item === array[pos]) {\n                pos++;\n            }\n            if (pos !== cycleStart) {\n                await sleep(sleepTime);\n                let temp = item;\n                item = array[pos];\n                array[pos] = temp;\n                setSortArray([...array]);\n            }\n            while (pos !== cycleStart) {\n                pos = cycleStart;\n                for (let i = cycleStart + 1; i < n; i++) {\n                    if (array[i] < item) {\n                        pos++;\n                    }\n                }\n                while (item === array[pos]) {\n                    pos++;\n                }\n                if (item !== array[pos]) {\n                    await sleep(sleepTime);\n                    let temp = item;\n                    item = array[pos];\n                    array[pos] = temp;\n                    setHighlightBar([pos]);\n                    setSortArray([...array]);\n                }\n            }\n        }\n    }\n\n    // pancake sort\n    async function pancakeSort(array,sleepTime) {\n        let n = array.length;\n        for (let i = n; i > 1; i--) {\n            let max = 0;\n\n            for (let j = 0; j < i; j++) {\n                if (array[j] > array[max]) {\n                    max = j;\n                }\n                setHighlightBar([i,j]);\n            }\n            if (max !== i - 1) {\n                await flip(array, max,sleepTime);\n                await flip(array, i - 1,sleepTime);\n            }\n        }\n    }\n    async function flip(array, i,sleepTime) {\n        let start = 0;\n        while (start < i) {\n            await sleep(sleepTime);\n            let temp = array[start];\n\n            array[start] = array[i];\n            array[i] = temp;\n            setHighlightBar([i]);\n            setSortArray([...array]);\n            start++;\n            i--;\n        }\n    } \n\n  return (\n    <div className='navBar'>\n        \n        <button id='shuffle-btn' onClick={() => generateNewArray(sortArray.length)}>Shuffle</button>\n        \n        <input\n            type='range'\n            min='10'\n            max='60'\n            step='2'\n            defaultValue='35'\n            className='slider'\n            onInput={() => handleSliderChange()}\n            id='myRange'></input>\n\n        <button id='visualize-btn' onClick={() => handleSortSelection()}>Visualize!</button>\n\n        <div className='custom-select'>\n        <select className='select' id='select-dropdown'>\n            <option value='quickSort'>QuickSort</option>\n            <option value='mergeSort'>MergeSort</option>\n            <option value='bubbleSort'>BubbleSort</option>\n            <option value='heapSort'>HeapSort</option>\n            <option value='insertionSort'>InsertionSort</option>\n            <option value='selectionSort'>SelectionSort</option>\n            <option value='countingSort'>CountingSort</option>\n            <option value='radixSort'>RadixSort</option>\n            <option value='bucketSort'>BucketSort</option>\n            <option value='shellSort'>ShellSort</option>\n            <option value='cocktailSort'>CocktailSort</option>\n            <option value='combSort'>CombSort</option>\n            <option value='gnomeSort'>GnomeSort</option>\n            <option value='cycleSort'>CycleSort</option>\n            <option value='pancakeSort'>PancakeSort</option>\n        </select>\n        </div>\n\n\n    </div>\n  )\n}\n\nexport default Settings"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}